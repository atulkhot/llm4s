package org.llm4s.imagegeneration.provider

import org.llm4s.imagegeneration._

import java.time.Instant
import java.util.Base64
import scala.util.Try

/**
 * HuggingFace Inference API client for image generation.
 * 
 * This client provides access to HuggingFace's hosted diffusion models through their
 * Inference API. It supports popular models like Stable Diffusion and other text-to-image
 * models available on the HuggingFace Hub.
 * 
 * @param config Configuration containing API key and model settings
 * 
 * @example
 * {{{
 * val config = HuggingFaceConfig(
 *   apiKey = "your-hf-token",
 *   model = "stabilityai/stable-diffusion-2-1"
 * )
 * val client = new HuggingFaceClient(config)
 * 
 * client.generateImage("a beautiful sunset over mountains") match {
 *   case Right(image) => println(s"Generated image: $${image.size}")
 *   case Left(error) => println(s"Error: $${error.message}")
 * }
 * }}}
 */
class HuggingFaceClient(config: HuggingFaceConfig) extends ImageGenerationClient {
  
  private val logger = org.slf4j.LoggerFactory.getLogger(getClass)
  
  /**
   * Generate a single image from a text prompt using HuggingFace Inference API.
   * 
   * @param prompt The text description of the image to generate
   * @param options Optional generation parameters like size, guidance scale, etc.
   * @return Either an error or the generated image
   */
  override def generateImage(
    prompt: String,
    options: ImageGenerationOptions = ImageGenerationOptions()
  ): Either[ImageGenerationError, GeneratedImage] = {
    generateImages(prompt, 1, options).map(_.head)
  }

  def validatePrompt(prompt: String): Either[ImageGenerationError, String] = {
    Either.cond(prompt.trim.nonEmpty,
      prompt,
      ValidationError("Prompt cannot be empty"))
  }

  def validateCount(count: Int): Either[ImageGenerationError, Int] = {
    Either.cond(count > 0 && count <= 4,
      count,
      ValidationError("Count must be between 1 and 4 for HuggingFace"))
  }

  def convertToBase64(response: requests.Response): Either[ImageGenerationError, String] = Try {
    val imageData = response.bytes
    Base64.getEncoder.encodeToString(imageData)
  }.toEither.left.map(exception => ServiceError(exception.getMessage, 500))

  def generateAllImages(prompt: String,
                        count: Int,
                        options: ImageGenerationOptions = ImageGenerationOptions(),
                        base64Data: String): Either[ImageGenerationError, IndexedSeq[GeneratedImage]] = Try {
    logger.debug("Generating {} image(s) with HuggingFace: '{}'", count, prompt)

    val images = (1 to count).map { i =>
      GeneratedImage(
        data = base64Data,
        format = options.format,
        size = options.size,
        prompt = prompt,
        seed = options.seed.map(_ + i),
        createdAt = Instant.now()
      )
    }
    (1 to count).foreach { i =>
      logger.debug("Generated image: {}", i)
    }
    images
  }.toEither.left.map(exception => ServiceError(exception.getMessage, 500))

  /**
   * Generate multiple images from a text prompt using HuggingFace Inference API.
   * 
   * Note: HuggingFace Inference API typically returns one image per request, so multiple
   * images are generated by making the same request multiple times with different seeds.
   * 
   * @param prompt The text description of the images to generate
   * @param count Number of images to generate (1-4)
   * @param options Optional generation parameters like size, guidance scale, etc.
   * @return Either an error or a sequence of generated images
   */
  override def generateImages(
                               prompt: String,
                               count: Int,
                               options: ImageGenerationOptions = ImageGenerationOptions()
                             ): Either[ImageGenerationError, Seq[GeneratedImage]] = {

    val result: Either[ImageGenerationError, IndexedSeq[GeneratedImage]] = for {
      prompt <- validatePrompt(prompt)
      count  <- validateCount(count)
      payload <- buildPayload(prompt, options)
      response <- makeHttpRequest(payload)
      base64Data <- convertToBase64(response)
      images <- generateAllImages(prompt, count, options, base64Data)
    } yield images

    result.left.foreach { error =>
      logger.error("Error generating images: {}", error.message)
    }

    result
  }
  
  /**
   * Check the health status of the HuggingFace Inference API.
   * 
   * @return Either an error or the current service status
   */
  override def health(): Either[ImageGenerationError, ServiceStatus] = {
    try {
      val testUrl = s"https://api-inference.huggingface.co/models/${config.model}"
      val headers = Map(
        "Authorization" -> s"Bearer ${config.apiKey}",
        "Content-Type" -> "application/json"
      )
      
      val response = requests.get(testUrl, headers = headers, readTimeout = 10000)
      
      if (response.statusCode == 200) {
        Right(ServiceStatus(
          status = HealthStatus.Healthy,
          message = "HuggingFace Inference API is responding"
        ))
      } else {
        Right(ServiceStatus(
          status = HealthStatus.Degraded,
          message = s"Service returned status code: ${response.statusCode}"
        ))
      }
    } catch {
      case e: Exception =>
        logger.warn(s"Health check failed: ${e.getMessage}")
        Left(ServiceError(s"Health check failed: ${e.getMessage}", 0))
    }
  }
  /**
   * @param huggingClientPayload the payload for which to generate json
   * @return the resulting json string
   */
  def createJsonPayload(huggingClientPayload: HuggingClientPayload): String =
    upickle.default.write(huggingClientPayload)

  /**
   * @param prompt the prompt for the payload
   * @param options image generation options
   * @return the payload converted to a json string
   */
  private def buildPayload(prompt: String, options: ImageGenerationOptions): Either[ImageGenerationError, String] = Try {
    val payload = HuggingClientPayload(prompt, options)
    val jsonStr = createJsonPayload(payload)
    logger.debug("Payload: {} - Json: {}", payload, jsonStr)
    jsonStr
  }.toEither.left.map(exception => ServiceError(exception.getMessage, 500))

  private def makeHttpRequest(payload: String): Either[ImageGenerationError, requests.Response] = {
    val url = s"https://api-inference.huggingface.co/models/${config.model}"
    val headers = Map(
      "Authorization" -> s"Bearer ${config.apiKey}",
      "Content-Type" -> "application/json"
    )

    logger.debug("Making request to: {}", url)
    logger.debug("Payload: {}", payload)

    val result = Try {
      requests.post(  // Note that the post could throw - as per the documentation
        url = url,
        data = payload,
        headers = headers,
        readTimeout = config.timeout,
        connectTimeout = 10000
      )
    }.toEither.left.map(exception => ServiceError(exception.getMessage, 500))

    result.flatMap { response =>
      if (response.statusCode == 200) {
        Right(response)
      } else {
        Left(ServiceError(response.text(), 500))
      }
    }
  }
} 